definitions:
  model.GetCompetency:
    properties:
      competencyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      competencyKnowledge:
        example:
        - знание 1
        - ' знание 2...'
        items:
          type: string
        type: array
      competencyMainTechnology:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      competencySkills:
        example: навык 1, навык 2...
        type: string
      competencyTitle:
        example: Название компетенции
        type: string
    type: object
  model.GetCourse:
    properties:
      courseCompetencies:
        example:
        - компетенция 1
        - ' компетенция 2...'
        items:
          type: string
        type: array
      courseDescription:
        example: Описание курса
        type: string
      courseDiscipline:
        example: Дисциплина, к которой отностися курс
        type: string
      courseId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      courseTeacher:
        example: Преподаватель
        type: string
      courseTitle:
        example: Название курса
        type: string
    type: object
  model.GetDiscipline:
    properties:
      disciplineDescription:
        example: Описание дисциплины
        type: string
      disciplineEducationalProgram:
        example: Образовательная программа, в которую входит цисциплина
        type: string
      disciplineId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      disciplineTitle:
        example: Название дисциплины
        type: string
    type: object
  model.GetEducationalProgram:
    properties:
      educationalProgramDexcription:
        example: Описание образовательной программы
        type: string
      educationalProgramId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      educationalProgramOrganization:
        example: организация, отвечающая за образовательную программу
        type: string
      educationalProgramTitle:
        example: Название образовательной программы
        type: string
    type: object
  model.GetKnowledge:
    properties:
      knowledgeId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      knowledgeTitle:
        example: Название знания
        type: string
    type: object
  model.GetOrganization:
    properties:
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      organizationTitle:
        example: Название организации
        type: string
    type: object
  model.GetPersonalProject:
    properties:
      personalProjectCompetencies:
        example:
        - Компетенции участика в этом проекте
        items:
          type: string
        type: array
      personalProjectMainTechnology:
        example: Основная технология проекта
        type: string
      personalProjectSemester:
        example: Семестр, в котором участик работал над проектом
        type: string
      personalProjectTeamRole:
        example: Роль участника в команде
        type: string
      projectDescription:
        example: Курс направлен на изучение поведения капибар в дикой природе...
        type: string
      projectId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      projectLifeScenarion:
        example: Проект позволит подобрать идеальную длину шерстки для ваших капибар
        type: string
      projectResult:
        example: Данные о зависимости длины шерстки капибар от продолжительности их
          жизни
        type: string
      projectTitle:
        example: Исследование зивисимости длины шерстки капибар от продолжительности
          их жизни
        type: string
    type: object
  model.GetPortfolio:
    properties:
      portfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      portfolioProjects:
        items:
          $ref: '#/definitions/model.GetPersonalProject'
        type: array
    type: object
  model.GetProfession:
    properties:
      professionCompetencies:
        example:
        - компетенция 1
        - ' компетенция 2...'
        items:
          type: string
        type: array
      professionDescription:
        example: Описание профессии
        type: string
      professionId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      professionTitle:
        example: Название профессии
        type: string
    type: object
  model.GetProject:
    properties:
      projectDescription:
        example: Курс направлен на изучение поведения капибар в дикой природе...
        type: string
      projectId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      projectLifeScenarion:
        example: Проект позволит подобрать идеальную длину шерстки для ваших капибар
        type: string
      projectMainTechnology:
        example: Название технологии
        type: string
      projectResult:
        example: Данные о зависимости длины шерстки капибар от продолжительности их
          жизни
        type: string
      projectTitle:
        example: Исследование зивисимости длины шерстки капибар от продолжительности
          их жизни
        type: string
    type: object
  model.GetStudent:
    properties:
      studentFullName:
        example: Фамилия Имя Отчество
        type: string
      studentId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      studentPortfolio:
        $ref: '#/definitions/model.GetPortfolio'
      studentSemester:
        example: 3
        type: integer
    type: object
  model.GetTechnology:
    properties:
      technologyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      technologyTitle:
        example: Название технологии
        type: string
    type: object
  model.GetTrajectory:
    properties:
      trajectoryCourse:
        example: Название курса
        type: string
      trajectoryId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      trajectorySemester:
        example: 3
        type: integer
      trajectoryStudent:
        example: Фамилия Имя Отчество
        type: string
    type: object
  model.PostCompetency:
    properties:
      competencyMainTechnology:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      competencySkills:
        example: навык 1, навык 2...
        type: string
      competencyTitle:
        example: Название компетенции
        type: string
    type: object
  model.PostCompetencyProfession:
    properties:
      competencyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      professionId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostCourse:
    properties:
      courseDescription:
        example: Описание курса
        type: string
      courseDisciplineId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      courseTeacher:
        example: Фамилия Имя Отчество
        type: string
      courseTitle:
        example: Название курса
        type: string
    type: object
  model.PostCourseCompetency:
    properties:
      competencyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      courseId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostDiscipline:
    properties:
      disciplineDescription:
        example: Описание дисциплины
        type: string
      disciplineEducationalProgramId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      disciplineTitle:
        example: Название дисциплины
        type: string
    type: object
  model.PostEducationalProgram:
    properties:
      educationalProgramDescription:
        example: Описание образовательной программы
        type: string
      educationalProgramOrganizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      educationalProgramTitle:
        example: Название образовательной программы
        type: string
    type: object
  model.PostKnowledge:
    properties:
      knowledgeTitle:
        example: Название знания
        type: string
    type: object
  model.PostKnowledgeCompetency:
    properties:
      competencyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      knowledgeId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostOrganization:
    properties:
      organizationTitle:
        example: Название организации
        type: string
    type: object
  model.PostPortfolio:
    properties:
      portfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostProfession:
    properties:
      professionDescription:
        example: Описание профессии
        type: string
      professionTitle:
        example: Название профессии
        type: string
    type: object
  model.PostProject:
    properties:
      projectDescription:
        example: Курс направлен на изучение поведения капибар в дикой природе...
        type: string
      projectLifeScenarion:
        example: Проект позволит подобрать идеальную длину шерстки для ваших капибар
        type: string
      projectMainTechnologyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      projectResult:
        example: Данные о зависимости длины шерстки капибар от продолжительности их
          жизни
        type: string
      projectTitle:
        example: Исследование зивисимости длины шерстки капибар от продолжительности
          их жизни
        type: string
    type: object
  model.PostProjectPortfolio:
    properties:
      PortfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      ProjectId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      TeamRole:
        example: Роль в команде
        type: string
      projectSemester:
        example: 3
        type: integer
    type: object
  model.PostProjectPortfolioCompetency:
    properties:
      CompetencyId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      PortfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      projectId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostStudent:
    properties:
      studentAdmitionDate:
        example: "2024-01-19"
        type: string
      studentFullName:
        example: Фамилия Имя Отчество
        type: string
      studentPortfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostStudyGroup:
    properties:
      courseId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      studentId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
  model.PostTechnology:
    properties:
      technologyTitle:
        example: Название технологии
        type: string
    type: object
  model.PostTrajectory:
    properties:
      trajectoryCourseId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      trajectorySemester:
        example: 3
        type: integer
      trajectoryStudentId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/competency/:
    post:
      consumes:
      - application/json
      description: post single competency
      parameters:
      - description: Competency request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostCompetency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCompetency'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post competency
      tags:
      - competency
  /api/v1/competency/{id}:
    get:
      consumes:
      - application/json
      description: get single competency by ID
      parameters:
      - description: Competency ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCompetency'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show competency
      tags:
      - competency
  /api/v1/competencyProfession/:
    post:
      consumes:
      - application/json
      description: post single competency-profession connection
      parameters:
      - description: CompetencyProfession data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostCompetencyProfession'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post competency-profession connection
      tags:
      - competencyProfession
  /api/v1/course/:
    post:
      consumes:
      - application/json
      description: post single course
      parameters:
      - description: Course data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostCourse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCourse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post course
      tags:
      - course
  /api/v1/course/{id}:
    get:
      consumes:
      - application/json
      description: get single course by ID
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetCourse'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show course
      tags:
      - course
  /api/v1/courseCompetency/:
    post:
      consumes:
      - application/json
      description: post single course-competency connection
      parameters:
      - description: Course-competency data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostCourseCompetency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post course-competency connection
      tags:
      - courseCompetency
  /api/v1/discipline/:
    post:
      consumes:
      - application/json
      description: post single discipline
      parameters:
      - description: Discipline data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostDiscipline'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetDiscipline'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post discipline
      tags:
      - discipline
  /api/v1/discipline/{id}:
    get:
      consumes:
      - application/json
      description: get single discipline by ID
      parameters:
      - description: Discipline ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetDiscipline'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show discipline
      tags:
      - discipline
  /api/v1/educationalProgram/:
    post:
      consumes:
      - application/json
      description: post single educational program
      parameters:
      - description: Educational program data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostEducationalProgram'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetEducationalProgram'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post educational program
      tags:
      - educational program
  /api/v1/educationalProgram/{id}:
    get:
      consumes:
      - application/json
      description: get single educational program by ID
      parameters:
      - description: Educational program ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetEducationalProgram'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show educational program
      tags:
      - educational program
  /api/v1/knowledge/:
    post:
      consumes:
      - application/json
      description: post single knowledge
      parameters:
      - description: Knowledge request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostKnowledge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetKnowledge'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post knowledge
      tags:
      - knowledge
  /api/v1/knowledge/{id}:
    get:
      consumes:
      - application/json
      description: get single knowledge by ID
      parameters:
      - description: Knowledge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetKnowledge'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show knowledge
      tags:
      - knowledge
  /api/v1/knowledgeCompetency/:
    post:
      consumes:
      - application/json
      description: post single knowledge-competency connection
      parameters:
      - description: Knowledge-competency request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostKnowledgeCompetency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post knowledge-competency connection
      tags:
      - knowledgeCompetency
  /api/v1/organization/:
    post:
      consumes:
      - application/json
      description: post single organization
      parameters:
      - description: Organization data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostOrganization'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetOrganization'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post organization
      tags:
      - organization
  /api/v1/organization/{id}:
    get:
      consumes:
      - application/json
      description: get single organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetOrganization'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show organization
      tags:
      - organization
  /api/v1/portfolio/:
    post:
      consumes:
      - application/json
      description: post single portfolio
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostPortfolio'
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post portfolio
      tags:
      - portfolio
  /api/v1/portfolio/{id}:
    get:
      consumes:
      - application/json
      description: get single portfolio by ID
      parameters:
      - description: Portfolio ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetPortfolio'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show portfolio
      tags:
      - portfolio
  /api/v1/profession/:
    post:
      consumes:
      - application/json
      description: post single profession
      parameters:
      - description: Profession data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostProfession'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProfession'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post profession
      tags:
      - profession
  /api/v1/profession/{id}:
    get:
      consumes:
      - application/json
      description: get single profession by ID
      parameters:
      - description: Profession ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProfession'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show profession
      tags:
      - profession
  /api/v1/project/:
    post:
      consumes:
      - application/json
      description: post single project
      parameters:
      - description: Project data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProject'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post project
      tags:
      - project
  /api/v1/project/{id}:
    get:
      consumes:
      - application/json
      description: get single project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProject'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show project
      tags:
      - project
  /api/v1/projectPortfolio/:
    post:
      consumes:
      - application/json
      description: post single project-portfolio connection
      parameters:
      - description: Personal project data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostProjectPortfolio'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post project-portfolio connection
      tags:
      - projectPortfolio
  /api/v1/projectPortfolioCompetency/:
    post:
      consumes:
      - application/json
      description: post single project-portfolio-competency connection
      parameters:
      - description: Personal project competency
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostProjectPortfolioCompetency'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post project-portfolio-competency connection
      tags:
      - projectPortfolioCompetency
  /api/v1/student/:
    post:
      consumes:
      - application/json
      description: post single student
      parameters:
      - description: Student`s data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostStudent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetStudent'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post student
      tags:
      - student
  /api/v1/student/{id}:
    get:
      consumes:
      - application/json
      description: get single student by ID
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetStudent'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show student
      tags:
      - student
  /api/v1/studyGroup/:
    post:
      consumes:
      - application/json
      description: Student`s course in current semester
      parameters:
      - description: Personal current student`s project
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostStudyGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post student`s course in current semester
      tags:
      - studyGroup
  /api/v1/technology/:
    post:
      consumes:
      - application/json
      description: post single technology
      parameters:
      - description: Technology request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostTechnology'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetTechnology'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post technology
      tags:
      - technology
  /api/v1/technology/{id}:
    get:
      consumes:
      - application/json
      description: get single technology by ID
      parameters:
      - description: Technology ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetTechnology'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show technology
      tags:
      - technology
  /api/v1/trajectory/:
    post:
      consumes:
      - application/json
      description: post single student`s archive course
      parameters:
      - description: Trajectory`s data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PostTrajectory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetTrajectory'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "502":
          description: Bad Gateway
      summary: Post student`s archive course
      tags:
      - trajectory
  /api/v1/trajectory/{id}:
    get:
      consumes:
      - application/json
      description: get single trajectory by ID
      parameters:
      - description: Trajectory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetTrajectory'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Show trajectory
      tags:
      - trajectory
swagger: "2.0"
